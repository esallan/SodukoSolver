package sodukoSolver;

public class SudokuSolver implements InterfaceSudokuSolver {
	private int[][] matrix = new int[9][9];

	public SudokuSolver() {
		for (int rows = 0; rows < 9; rows++) {
			for (int coulmns = 0; coulmns < 9; coulmns++) {
				matrix[rows][coulmns] = 0;
			}
		}
	}

	@Override
	public boolean solve() {
		return solve(0, 0);
	}

	private boolean solve(int row, int col) {
		int[] nextElementIndecies = next(row, col);
		int nextRow = nextElementIndecies[0];
		int nextCol = nextElementIndecies[1];
		if (nextRow == 0 && nextCol == 0) {
			return true;
		}
		boolean isPreFilled = matrix[row][col] != 0;
		if (isPreFilled) {
			boolean valid = isValid(row, col);
			if (!valid) {
				return false;
			} else {
				return solve(nextRow, nextCol);
			}
		} else {
			for (int attemptedNumber = 1; attemptedNumber < 10; attemptedNumber++) {
				matrix[row][col] = attemptedNumber;
				boolean valid = isValid(row, col);
				if (valid) {
					boolean solvable = solve(nextRow, nextCol);
					if (!solvable) {
						continue;
					} else {
						return true;
					}
				} else {
					continue;
				}
			}
			return false;
		}

	}

	private int[] next(int row, int col) {
		if (row == 8 && col == 8) {
			return new int[] { 0, 0 };
		} else if (col == 8) {
			return new int[] { row + 1, 0 };
		} else {
			return new int[] { row, col + 1 };
		}
	}

	@Override
	public void set(int row, int col, int digit) {
		if (row > 8 || row < 0) {
			throw new IndexOutOfBoundsException();
		}
		if (col > 8 || col < 0) {
			throw new IndexOutOfBoundsException();
		}

		if (digit > 8 || digit < 0) {
			throw new IllegalArgumentException();
		}

		matrix[row][col] = digit;

	}

	@Override
	public int get(int row, int col) {
		return matrix[row][col];
	}

	@Override
	public void clear(int row, int col) {
		matrix[row][col] = 0;

	}

	@Override
	public void clearAll() {
		for (int row = 0; row < matrix.length; row++) {
			for (int col = 0; col < matrix.length; col++) {
				matrix[row][col] = 0;
			}
		}

	}

	@Override
	public boolean isValid(int row, int col) {
		if (row > 8 || row < 0) {
			throw new IndexOutOfBoundsException();
		}
		if (col > 8 || col < 0) {
			throw new IndexOutOfBoundsException();
		} else {
			boolean validRow = isRowValid(row, col);
			boolean validCol = isColValid(row, col);
			boolean validRegion = isRegionValid(row, col);
			if (validRow && validCol && validRegion) {
				return true;
			} else {
				return false;
			}
		}
	}

	private boolean isRowValid(int row, int col) {
		int digit = matrix[row][col];
		for(col = 0; col < 9; col++) {
			if(digit == matrix[row][col]) {
				return false;
			}
		}
		return true;	
	}
	
	private boolean isColValid(int row, int col) {
		int digit = matrix[row][col];
		for(row = 0; row < 9; row++) {
			if(digit == matrix[row][col]) {
				return false;
			}
		}
		return true;	
	}
	
//	private boolean isRegionValid(int row, int col) {
//		int digit = matrix[row][col];
//		int[][] regionMatrix;
//		regionMatrix = 
//	}


	@Override
	public boolean isAllValid() {

		for (int row = 0; row < matrix.length; row++) {
			for (int col = 0; col < matrix.length; col++) {
				if (get(row, col) < 1 || get(row, col) > 9) {
					return false;
				}
			}
		}
		return true;
	}

	@Override
	public void setGrid(int[][] m) {
		if (m.length != 9 || m[0].length != 9) {
			throw new IllegalArgumentException("Grid must be 9x9");
		}

		for (int row = 0; row < 9; row++) {
			for (int col = 1; col < 9; col++) {
				if (m[row][col] < 0 || m[row][col] > 9) {
					throw new IllegalArgumentException("Value must be between 0 and 9");
				}
			}
		}
		this.matrix = m;
	}

	@Override
	public int[][] getGrid() {
		return this.matrix;
	}

}
